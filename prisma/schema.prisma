// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  EMPLOYER
  APPLICANT
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          ROLE
  accounts      Account[]
  sessions      Session[]
  isVerified    Boolean   @default(false)

  UserInfo    UserInfo?
  userInfoId  String?
  AppliedJobs AppliedJobs[]
  SavedJobs   SavedJobs[]
  Company     Company[]
  JobScore    JobScore[]
  Job         Job[]
}

model UserInfo {
  id                String  @id @default(uuid())
  name              String
  email             String  @unique
  phone             String?
  location          String?
  website           String?
  bio               String?
  profileCompletion Int     @default(0)
  account           User?   @relation(fields: [userId], references: [id])
  userId            String? @unique

  skills            Skill[] // 1-to-many
  experience        Experience[] // 1-to-many
  education         Education[] // 1-to-many
  certificates      Certificate[] // 1-to-many
  technicalSkills   TechnicalSkill[] // 1-to-many
  softSkills        SoftSkill[] // 1-to-many
  hardSkills        HardSkill[] // 1-to-many
  resume            FileAttatchment? @relation(fields: [fileAttatchmentId], references: [id])
  fileAttatchmentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FILETYPE {
  IMAGE
  PDF
  DOCX
  DOC
}

model FileAttatchment {
  id        String     @id @default(uuid())
  url       String
  type      String
  name      String
  size      Int
  createdAt DateTime   @default(now())
  UserInfo  UserInfo[]
}

model Skill {
  id     String   @id @default(uuid())
  name   String
  user   UserInfo @relation(fields: [userId], references: [id])
  userId String
}

model Experience {
  id          String   @id @default(uuid())
  title       String
  company     String
  location    String
  startDate   String
  endDate     String
  description String
  user        UserInfo @relation(fields: [userId], references: [id])
  userId      String
}

model Education {
  id String @id @default(uuid())

  degree      String
  institution String
  location    String
  startDate   String
  endDate     String
  description String
  user        UserInfo @relation(fields: [userId], references: [id])
  userId      String
}

model Certificate {
  id String @id @default(uuid())

  name         String
  issuer       String
  issueDate    String
  expiryDate   String
  credentialId String
  url          String
  user         UserInfo @relation(fields: [userId], references: [id])
  userId       String
}

model TechnicalSkill {
  id String @id @default(uuid())

  name     String
  category String   @default("Technical")
  user     UserInfo @relation(fields: [userId], references: [id])
  userId   String
}

model SoftSkill {
  id String @id @default(uuid())

  name     String
  category String   @default("Soft")
  user     UserInfo @relation(fields: [userId], references: [id])
  userId   String
}

model HardSkill {
  id String @id @default(uuid())

  name     String
  category String   @default("Hard")
  user     UserInfo @relation(fields: [userId], references: [id])
  userId   String
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id String @id @default(uuid())

  company_name        String
  company_address     String
  contact             String
  description         String
  job_title           String
  industry_field      String
  priority_categories String[]
  isActive            Boolean  @default(true)

  employer User   @relation(fields: [userId], references: [id])
  userId   String

  qualifications Qualification[]

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  applicants AppliedJobs[]
  SavedJobs  SavedJobs[]
  JobScore   JobScore[]
  metrics    metrics?
}

model metrics {
  id           String @id @default(uuid())
  job          Job    @relation(fields: [jobId], references: [id])
  jobId        String @unique
  views        Int    @default(0)
  applications Int    @default(0)
  saved        Int    @default(0)
  qualified    Int    @default(0)
}

model Qualification {
  id                   String   @id @default(uuid())
  requirement          String
  possible_credentials String[] // Array of strings
  categories           String[] // Array of strings
  priority             Boolean
  job                  Job      @relation(fields: [jobId], references: [id])
  jobId                String
}

model JobScore {
  id          String        @id @default(uuid())
  score       Int
  job         Job           @relation(fields: [jobId], references: [id])
  jobId       String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  AppliedJobs AppliedJobs[]
}

model Company {
  id          String    @id @default(uuid())
  name        String
  logo        String?
  industry    String?
  size        String?
  founded     Int?
  website     String?
  location    String?
  email       String?
  phone       String?
  description String?
  benefits    Benefit[] // Relation to Benefit model

  socialMedia       SocialMedia   @relation(fields: [socialMediaId], references: [id]) // Relation to SocialMedia model
  profileCompletion Int           @default(0)
  contactPerson     ContactPerson @relation(fields: [contactPersonId], references: [id])
  contactPersonId   String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  socialMediaId String
}

model ContactPerson {
  id            String    @id @default(uuid())
  name          String
  contactNumber String?
  email         String
  Company       Company[]
}

model Benefit {
  id String @id @default(uuid())

  content   String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model SocialMedia {
  id String @id @default(uuid())

  linkedin String?
  twitter  String?
  facebook String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Company Company[]
}

enum APPLICATIONSTATUS {
  SHORTLISTED
  REVIEW
  REJECTED
  RECEIVED
}

model AppliedJobs {
  id     String            @id @default(uuid())
  user   User              @relation(fields: [userId], references: [id])
  job    Job               @relation(fields: [jobId], references: [id])
  status APPLICATIONSTATUS
  userId String
  jobId  String

  jobScore   JobScore? @relation(fields: [jobScoreId], references: [id])
  jobScoreId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedJobs {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  job    Job    @relation(fields: [jobId], references: [id])
  userId String
  jobId  String

  createdAt DateTime @default(now())
}
